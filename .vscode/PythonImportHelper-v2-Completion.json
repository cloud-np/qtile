[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Click",
        "importPath": "libqtile.config",
        "description": "libqtile.config",
        "isExtraImport": true,
        "detail": "libqtile.config",
        "documentation": {}
    },
    {
        "label": "Drag",
        "importPath": "libqtile.config",
        "description": "libqtile.config",
        "isExtraImport": true,
        "detail": "libqtile.config",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "libqtile.config",
        "description": "libqtile.config",
        "isExtraImport": true,
        "detail": "libqtile.config",
        "documentation": {}
    },
    {
        "label": "Key",
        "importPath": "libqtile.config",
        "description": "libqtile.config",
        "isExtraImport": true,
        "detail": "libqtile.config",
        "documentation": {}
    },
    {
        "label": "Match",
        "importPath": "libqtile.config",
        "description": "libqtile.config",
        "isExtraImport": true,
        "detail": "libqtile.config",
        "documentation": {}
    },
    {
        "label": "Screen",
        "importPath": "libqtile.config",
        "description": "libqtile.config",
        "isExtraImport": true,
        "detail": "libqtile.config",
        "documentation": {}
    },
    {
        "label": "layout",
        "importPath": "libqtile",
        "description": "libqtile",
        "isExtraImport": true,
        "detail": "libqtile",
        "documentation": {}
    },
    {
        "label": "bar",
        "importPath": "libqtile",
        "description": "libqtile",
        "isExtraImport": true,
        "detail": "libqtile",
        "documentation": {}
    },
    {
        "label": "hook",
        "importPath": "libqtile",
        "description": "libqtile",
        "isExtraImport": true,
        "detail": "libqtile",
        "documentation": {}
    },
    {
        "label": "qtile",
        "importPath": "libqtile",
        "description": "libqtile",
        "isExtraImport": true,
        "detail": "libqtile",
        "documentation": {}
    },
    {
        "label": "simple_key_binder",
        "importPath": "libqtile.dgroups",
        "description": "libqtile.dgroups",
        "isExtraImport": true,
        "detail": "libqtile.dgroups",
        "documentation": {}
    },
    {
        "label": "lazy",
        "importPath": "libqtile.lazy",
        "description": "libqtile.lazy",
        "isExtraImport": true,
        "detail": "libqtile.lazy",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "init_widgets_list",
        "importPath": "widgets",
        "description": "widgets",
        "isExtraImport": true,
        "detail": "widgets",
        "documentation": {}
    },
    {
        "label": "init_widgets_screen1",
        "importPath": "widgets",
        "description": "widgets",
        "isExtraImport": true,
        "detail": "widgets",
        "documentation": {}
    },
    {
        "label": "init_widgets_screen2",
        "importPath": "widgets",
        "description": "widgets",
        "isExtraImport": true,
        "detail": "widgets",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "preferences",
        "description": "preferences",
        "isExtraImport": true,
        "detail": "preferences",
        "documentation": {}
    },
    {
        "label": "mod",
        "importPath": "preferences",
        "description": "preferences",
        "isExtraImport": true,
        "detail": "preferences",
        "documentation": {}
    },
    {
        "label": "terminal",
        "importPath": "preferences",
        "description": "preferences",
        "isExtraImport": true,
        "detail": "preferences",
        "documentation": {}
    },
    {
        "label": "browser",
        "importPath": "preferences",
        "description": "preferences",
        "isExtraImport": true,
        "detail": "preferences",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "preferences",
        "description": "preferences",
        "isExtraImport": true,
        "detail": "preferences",
        "documentation": {}
    },
    {
        "label": "terminal",
        "importPath": "preferences",
        "description": "preferences",
        "isExtraImport": true,
        "detail": "preferences",
        "documentation": {}
    },
    {
        "label": "widget",
        "importPath": "qtile_extras",
        "description": "qtile_extras",
        "isExtraImport": true,
        "detail": "qtile_extras",
        "documentation": {}
    },
    {
        "label": "BorderDecoration",
        "importPath": "qtile_extras.widget.decorations",
        "description": "qtile_extras.widget.decorations",
        "isExtraImport": true,
        "detail": "qtile_extras.widget.decorations",
        "documentation": {}
    },
    {
        "label": "move_window_to_screen_group_at_left",
        "kind": 2,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "def move_window_to_screen_group_at_left(qtile):\n    i = qtile.screens.index(qtile.current_screen)\n    if i > 0:\n        other_screen = qtile.screens[i - 1]\n        if other_screen and other_screen.group:\n            qtile.current_window.togroup(other_screen.group.name)\ndef move_window_to_screen_group_at_right(qtile):\n    i = qtile.screens.index(qtile.current_screen)\n    if i <= 0:\n        other_screen = qtile.screens[i + 1]",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "move_window_to_screen_group_at_right",
        "kind": 2,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "def move_window_to_screen_group_at_right(qtile):\n    i = qtile.screens.index(qtile.current_screen)\n    if i <= 0:\n        other_screen = qtile.screens[i + 1]\n        if other_screen and other_screen.group:\n            qtile.current_window.togroup(other_screen.group.name)\nkeys = [\n    # The essentials\n    Key([mod], \"Return\", lazy.spawn(terminal), desc=\"Launches My Terminal\"),\n    Key([mod], \"b\", lazy.spawn(browser), desc=\"Bravebrowser\"),",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "init_screens",
        "kind": 2,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "def init_screens():\n    return [\n        Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=1.0, size=20)),\n        Screen(top=bar.Bar(widgets=init_widgets_screen2(), opacity=1.0, size=20)),\n    ]\nif __name__ in [\"config\", \"__main__\"]:\n    screens = init_screens()\n    widgets_list = init_widgets_list()\n    widgets_screen1 = init_widgets_screen1()\n    widgets_screen2 = init_widgets_screen2()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "start_once",
        "kind": 2,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "def start_once():\n    home = os.path.expanduser(\"~\")\n    subprocess.call([home + \"/.config/qtile/autostart.sh\"])\n# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this\n# string besides java UI toolkits; you can see several discussions on the\n# mailing lists, GitHub issues, and other WM documentation that suggest setting\n# this string if your java app doesn't work correctly. We may as well just lie\n# and say that we're a working one by default.\n#\n# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "keys = [\n    # The essentials\n    Key([mod], \"Return\", lazy.spawn(terminal), desc=\"Launches My Terminal\"),\n    Key([mod], \"b\", lazy.spawn(browser), desc=\"Bravebrowser\"),\n    Key([mod], \"v\", lazy.spawn(\"pavucontrol\"), desc=\"Audio Controll\"),\n    Key([mod], \"s\", lazy.spawn(\"spotify\"), desc=\"Spotify\"),\n    Key([], \"Print\", lazy.spawn(\"flameshot gui\"), desc=\"Screenshot\"),\n    Key([mod], \"Tab\", lazy.next_layout(), desc=\"Toggle through layouts\"),\n    Key([mod, \"shift\"], \"r\", lazy.reload_config(), desc=\"Restart Qtile\"),\n    Key([\"control\", \"shift\"], \"r\", lazy.spawncmd(), desc=\"Run programs\"),",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "groups",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "groups = [\n    Group(\"DEV\", layout=\"monadtall\"),\n    Group(\"WWW\", layout=\"monadtall\"),\n    Group(\"SYS\", layout=\"monadtall\"),\n    Group(\"SYS\", layout=\"monadtall\"),\n    Group(\"DOC\", layout=\"monadtall\"),\n    Group(\"VBOX\", layout=\"monadtall\"),\n    Group(\"CHAT\", layout=\"monadtall\"),\n    Group(\"MUS\", layout=\"monadtall\"),\n    Group(\"VID\", layout=\"monadtall\"),",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "dgroups_key_binder",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "dgroups_key_binder = simple_key_binder(\"mod4\")\nlayout_theme = {\n    \"border_width\": 2,\n    # \"margin\": 10,\n    \"border_focus\": \"da8548\",\n    \"border_normal\": \"1D2330\",\n}\nlayouts = [\n    # layout.MonadWide(**layout_theme),\n    # layout.Bsp(**layout_theme),",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "layout_theme",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "layout_theme = {\n    \"border_width\": 2,\n    # \"margin\": 10,\n    \"border_focus\": \"da8548\",\n    \"border_normal\": \"1D2330\",\n}\nlayouts = [\n    # layout.MonadWide(**layout_theme),\n    # layout.Bsp(**layout_theme),\n    # layout.Stack(stacks=2, **layout_theme),",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "layouts",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "layouts = [\n    # layout.MonadWide(**layout_theme),\n    # layout.Bsp(**layout_theme),\n    # layout.Stack(stacks=2, **layout_theme),\n    # layout.Columns(**layout_theme),\n    # layout.RatioTile(**layout_theme),\n    # layout.Tile(shift_windows=True, **layout_theme),\n    # layout.VerticalTile(**layout_theme),\n    # layout.Matrix(**layout_theme),\n    # layout.Zoomy(**layout_theme),",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "prompt = f\"{os.environ['USER']}@{socket.gethostname()}: \"\n# DEFAULT WIDGET SETTINGS\nwidget_defaults = dict(\n    font=\"JetBrainsMono Bold\", fontsize=10, padding=10, background=colors[2]\n)\nextension_defaults = widget_defaults.copy()\ndef init_screens():\n    return [\n        Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=1.0, size=20)),\n        Screen(top=bar.Bar(widgets=init_widgets_screen2(), opacity=1.0, size=20)),",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "widget_defaults",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "widget_defaults = dict(\n    font=\"JetBrainsMono Bold\", fontsize=10, padding=10, background=colors[2]\n)\nextension_defaults = widget_defaults.copy()\ndef init_screens():\n    return [\n        Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=1.0, size=20)),\n        Screen(top=bar.Bar(widgets=init_widgets_screen2(), opacity=1.0, size=20)),\n    ]\nif __name__ in [\"config\", \"__main__\"]:",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "extension_defaults",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "extension_defaults = widget_defaults.copy()\ndef init_screens():\n    return [\n        Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=1.0, size=20)),\n        Screen(top=bar.Bar(widgets=init_widgets_screen2(), opacity=1.0, size=20)),\n    ]\nif __name__ in [\"config\", \"__main__\"]:\n    screens = init_screens()\n    widgets_list = init_widgets_list()\n    widgets_screen1 = init_widgets_screen1()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "mouse",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "mouse = [\n    Drag(\n        [mod],\n        \"Button1\",\n        lazy.window.set_position_floating(),\n        start=lazy.window.get_position(),\n    ),\n    Drag(\n        [mod], \"Button3\", lazy.window.set_size_floating(), start=lazy.window.get_size()\n    ),",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "dgroups_app_rules",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "dgroups_app_rules = []  # type: List\nfollow_mouse_focus = True\nbring_front_click = False\ncursor_warp = False\nfloating_layout = layout.Floating(\n    float_rules=[\n        # Run the utility of `xprop` to see the wm class and name of an X client.\n        # default_float_rules include: utility, notification, toolbar, splash, dialog,\n        # file_progress, confirm, download and error.\n        *layout.Floating.default_float_rules,",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "follow_mouse_focus",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "follow_mouse_focus = True\nbring_front_click = False\ncursor_warp = False\nfloating_layout = layout.Floating(\n    float_rules=[\n        # Run the utility of `xprop` to see the wm class and name of an X client.\n        # default_float_rules include: utility, notification, toolbar, splash, dialog,\n        # file_progress, confirm, download and error.\n        *layout.Floating.default_float_rules,\n        Match(title=\"Confirmation\"),  # tastyworks exit box",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "bring_front_click",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "bring_front_click = False\ncursor_warp = False\nfloating_layout = layout.Floating(\n    float_rules=[\n        # Run the utility of `xprop` to see the wm class and name of an X client.\n        # default_float_rules include: utility, notification, toolbar, splash, dialog,\n        # file_progress, confirm, download and error.\n        *layout.Floating.default_float_rules,\n        Match(title=\"Confirmation\"),  # tastyworks exit box\n        Match(title=\"Qalculate!\"),  # qalculate-gtk",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "cursor_warp",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "cursor_warp = False\nfloating_layout = layout.Floating(\n    float_rules=[\n        # Run the utility of `xprop` to see the wm class and name of an X client.\n        # default_float_rules include: utility, notification, toolbar, splash, dialog,\n        # file_progress, confirm, download and error.\n        *layout.Floating.default_float_rules,\n        Match(title=\"Confirmation\"),  # tastyworks exit box\n        Match(title=\"Qalculate!\"),  # qalculate-gtk\n        Match(wm_class=\"kdenlive\"),  # kdenlive",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "floating_layout",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "floating_layout = layout.Floating(\n    float_rules=[\n        # Run the utility of `xprop` to see the wm class and name of an X client.\n        # default_float_rules include: utility, notification, toolbar, splash, dialog,\n        # file_progress, confirm, download and error.\n        *layout.Floating.default_float_rules,\n        Match(title=\"Confirmation\"),  # tastyworks exit box\n        Match(title=\"Qalculate!\"),  # qalculate-gtk\n        Match(wm_class=\"kdenlive\"),  # kdenlive\n        Match(wm_class=\"pinentry-gtk-2\"),  # GPG key password entry",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "auto_fullscreen",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "auto_fullscreen = True\nfocus_on_window_activation = \"smart\"\nreconfigure_screens = True\n# If things like steam games want to auto-minimize themselves when losing\n# focus, should we respect this or not?\nauto_minimize = True\n@hook.subscribe.startup_once\ndef start_once():\n    home = os.path.expanduser(\"~\")\n    subprocess.call([home + \"/.config/qtile/autostart.sh\"])",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "focus_on_window_activation",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "focus_on_window_activation = \"smart\"\nreconfigure_screens = True\n# If things like steam games want to auto-minimize themselves when losing\n# focus, should we respect this or not?\nauto_minimize = True\n@hook.subscribe.startup_once\ndef start_once():\n    home = os.path.expanduser(\"~\")\n    subprocess.call([home + \"/.config/qtile/autostart.sh\"])\n# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "reconfigure_screens",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "reconfigure_screens = True\n# If things like steam games want to auto-minimize themselves when losing\n# focus, should we respect this or not?\nauto_minimize = True\n@hook.subscribe.startup_once\ndef start_once():\n    home = os.path.expanduser(\"~\")\n    subprocess.call([home + \"/.config/qtile/autostart.sh\"])\n# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this\n# string besides java UI toolkits; you can see several discussions on the",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "auto_minimize",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "auto_minimize = True\n@hook.subscribe.startup_once\ndef start_once():\n    home = os.path.expanduser(\"~\")\n    subprocess.call([home + \"/.config/qtile/autostart.sh\"])\n# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this\n# string besides java UI toolkits; you can see several discussions on the\n# mailing lists, GitHub issues, and other WM documentation that suggest setting\n# this string if your java app doesn't work correctly. We may as well just lie\n# and say that we're a working one by default.",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "wmname",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "wmname = \"LG3D\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 5,
        "importPath": "preferences",
        "description": "preferences",
        "peekOfCode": "mod = \"mod4\"\nterminal = \"alacritty\"\nbrowser = \"brave-browser\"\ncolors = [[\"#282c34\", \"#282c34\"],\n          [\"#1c1f24\", \"#1c1f24\"],\n          [\"#dfdfdf\", \"#dfdfdf\"],\n          [\"#ff6c6b\", \"#ff6c6b\"],\n          [\"#98be65\", \"#98be65\"],\n          [\"#da8548\", \"#da8548\"],\n          [\"#51afef\", \"#51afef\"],",
        "detail": "preferences",
        "documentation": {}
    },
    {
        "label": "terminal",
        "kind": 5,
        "importPath": "preferences",
        "description": "preferences",
        "peekOfCode": "terminal = \"alacritty\"\nbrowser = \"brave-browser\"\ncolors = [[\"#282c34\", \"#282c34\"],\n          [\"#1c1f24\", \"#1c1f24\"],\n          [\"#dfdfdf\", \"#dfdfdf\"],\n          [\"#ff6c6b\", \"#ff6c6b\"],\n          [\"#98be65\", \"#98be65\"],\n          [\"#da8548\", \"#da8548\"],\n          [\"#51afef\", \"#51afef\"],\n          [\"#c678dd\", \"#c678dd\"],",
        "detail": "preferences",
        "documentation": {}
    },
    {
        "label": "browser",
        "kind": 5,
        "importPath": "preferences",
        "description": "preferences",
        "peekOfCode": "browser = \"brave-browser\"\ncolors = [[\"#282c34\", \"#282c34\"],\n          [\"#1c1f24\", \"#1c1f24\"],\n          [\"#dfdfdf\", \"#dfdfdf\"],\n          [\"#ff6c6b\", \"#ff6c6b\"],\n          [\"#98be65\", \"#98be65\"],\n          [\"#da8548\", \"#da8548\"],\n          [\"#51afef\", \"#51afef\"],\n          [\"#c678dd\", \"#c678dd\"],\n          [\"#46d9ff\", \"#46d9ff\"],",
        "detail": "preferences",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "preferences",
        "description": "preferences",
        "peekOfCode": "colors = [[\"#282c34\", \"#282c34\"],\n          [\"#1c1f24\", \"#1c1f24\"],\n          [\"#dfdfdf\", \"#dfdfdf\"],\n          [\"#ff6c6b\", \"#ff6c6b\"],\n          [\"#98be65\", \"#98be65\"],\n          [\"#da8548\", \"#da8548\"],\n          [\"#51afef\", \"#51afef\"],\n          [\"#c678dd\", \"#c678dd\"],\n          [\"#46d9ff\", \"#46d9ff\"],\n          [\"#a9a1e1\", \"#a9a1e1\"]]",
        "detail": "preferences",
        "documentation": {}
    },
    {
        "label": "init_widgets_list",
        "kind": 2,
        "importPath": "widgets",
        "description": "widgets",
        "peekOfCode": "def init_widgets_list():\n    widgets_list = [\n        widget.Sep(linewidth=0, padding=6, foreground=colors[2], background=colors[0]),\n        widget.Image(\n            filename=\"~/.config/qtile/icons/python-white.png\",\n            scale=\"False\",\n            mouse_callbacks={\"Button1\": lambda: qtile.cmd_spawn(terminal)},\n        ),\n        widget.Sep(linewidth=0, padding=6, foreground=colors[2], background=colors[0]),\n        widget.GroupBox(",
        "detail": "widgets",
        "documentation": {}
    },
    {
        "label": "init_widgets_screen1",
        "kind": 2,
        "importPath": "widgets",
        "description": "widgets",
        "peekOfCode": "def init_widgets_screen1():\n    widgets_screen1 = init_widgets_list()\n    del widgets_screen1[\n        9:10\n    ]  # Slicing removes unwanted widgets (systray) on Monitors 1,3\n    return widgets_screen1\ndef init_widgets_screen2():\n    widgets_screen2 = init_widgets_list()\n    return widgets_screen2  # Monitor 2 will display all widgets in widgets_list",
        "detail": "widgets",
        "documentation": {}
    },
    {
        "label": "init_widgets_screen2",
        "kind": 2,
        "importPath": "widgets",
        "description": "widgets",
        "peekOfCode": "def init_widgets_screen2():\n    widgets_screen2 = init_widgets_list()\n    return widgets_screen2  # Monitor 2 will display all widgets in widgets_list",
        "detail": "widgets",
        "documentation": {}
    }
]